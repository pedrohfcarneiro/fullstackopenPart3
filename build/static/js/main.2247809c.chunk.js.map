{"version":3,"sources":["services/personsService.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Notification","message","isError","className","Person","name","phone","handleDelete","handleClick","text","Persons","persons","deleteCallbackFunction","map","person","Form","addPerson","handleNameChange","handlePhoneChange","newName","newPhone","onSubmit","value","onChange","type","Filter","props","filter","handleFilterChange","Button","onClick","App","useState","setPersons","setNewName","setNewPhone","setFilter","notificationMessage","setNotificationMessage","isInDatabase","useEffect","console","log","personsService","allPersons","catch","error","alert","alreadyExistsInState","includes","personsToShow","toLowerCase","event","target","preventDefault","dbPersons","dbNames","p","window","confirm","currentPerson","find","changedPerson","changedPersonsArray","setTimeout","newPerson","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2247809c.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/phonebookapi/contacts'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst createPerson = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst updatePerson = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n\tconst request = axios.delete(`${baseUrl}/${id}`)\r\n\treturn request\r\n}\r\n\r\nexport default { getAll,createPerson,updatePerson, deletePerson}","import React from 'react'\r\n\r\nconst Notification = ({ message, isError }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n  if(isError) {\r\n        return(\r\n            <div className='notificationError'>\r\n                {message}\r\n            </div>\r\n        )\r\n  }\r\n  return (\r\n    <div className='notification'>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\r\nimport personsService from './services/personsService'\r\nimport Notification from './components/Notification'\r\nimport './index.css'\r\n\r\nconst Person = ({name, phone, handleDelete}) => {\r\n    return(\r\n        <div>\r\n            {name} {phone} <Button handleClick={handleDelete} text=\"delete\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Persons = ({persons, deleteCallbackFunction}) => {\r\n    return(\r\n        <div>\r\n            {persons.map((person) => {\r\n                return(\r\n                    <Person key={person.name} name={person.name} phone={person.phone} handleDelete={deleteCallbackFunction(person.id, person.name)} />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Form = ({addPerson, handleNameChange, handlePhoneChange, newName, newPhone}) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={addPerson}>\r\n                <div>\r\n                  name: <input value = {newName} onChange={handleNameChange} />\r\n                </div>\r\n                <div>\r\n                  phone: <input value = {newPhone} onChange={handlePhoneChange} />\r\n                </div>\r\n                <div>\r\n                  <button type=\"submit\">add</button>\r\n                </div>\r\n              </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Filter = (props) => {\r\n    return(\r\n        <div>\r\n            filter shown with: <input value = {props.filter} onChange={props.handleFilterChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Button = ({handleClick,text}) => {\r\n    return(\r\n        <div>\r\n            <button onClick={handleClick}>{text}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([])\r\n\r\n  const [newName, setNewName] = useState('')\r\n\r\n  const [newPhone, setNewPhone] = useState('')\r\n\r\n  const [filter, setFilter] = useState('')\r\n\r\n  const [notificationMessage, setNotificationMessage] = useState(null)\r\n\r\n  const [isError, setIsError] = useState(false)\r\n\r\n  let isInDatabase = false\r\n\r\n  useEffect(() => {\r\n    console.log('effect')\r\n    personsService.getAll()\r\n        .then(allPersons => {\r\n            console.log(allPersons)\r\n            setPersons(allPersons)\r\n        })\r\n        .catch(error => {\r\n          alert(\r\n            `fail`\r\n          )\r\n        })\r\n  }, [])\r\n\r\n  const addPerson = (event) => {\r\n    event.preventDefault()\r\n    personsService.getAll()\r\n        .then(dbPersons => {\r\n            console.log(dbPersons)\r\n            const dbNames = dbPersons.map(p => p.name)\r\n            console.log(dbNames)\r\n            console.log(newName)\r\n            console.log(dbNames.includes(newName))\r\n            if(dbNames.includes(newName)){\r\n                console.log(\"tornou true\")\r\n                isInDatabase = true\r\n                console.log(isInDatabase)\r\n                if(!alreadyExistsInState(persons)){  //It is in database but not in States\r\n                    const newPersonObject = {\r\n                        name: newName,\r\n                        phone: newPhone\r\n                    }\r\n                    personsService.createPerson(newPersonObject)\r\n                        .then(newPerson => {\r\n                            console.log('promise fullfilled')\r\n                            setPersons(persons.concat(newPerson))\r\n                            setNewName('')\r\n                            setNewPhone('')\r\n                            setNotificationMessage('Added new person', false)\r\n                            setTimeout(() => {\r\n                                setNotificationMessage(null)\r\n                            }, 5000)\r\n                        })\r\n                        .catch(error => {\r\n                          alert(\r\n                            `fail`\r\n                          )\r\n                          setNotificationMessage('error', true)\r\n                          setTimeout(() => {\r\n                              setNotificationMessage(null)\r\n                          }, 5000)\r\n                        })\r\n                }\r\n                else {  //if there already is in state and db\r\n                    if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\r\n                        const currentPerson = persons.find(p => p.name === newName)\r\n                        const changedPerson = {...currentPerson, phone: newPhone}\r\n                        personsService.updatePerson(currentPerson.id, changedPerson)\r\n                            .then(changedPersonsArray => {\r\n                                setPersons(persons.map(person => person.name !== newName ? person : changedPerson))\r\n                                setNewName('')\r\n                                setNewPhone('')\r\n                                setNotificationMessage('Added new person', false)\r\n                                setTimeout(() => {\r\n                                    setNotificationMessage(null)\r\n                                }, 5000)\r\n                            })\r\n                            .catch(error => {\r\n                              alert(\r\n                                `fail`\r\n                              )\r\n                              setNotificationMessage('error', true)\r\n                              setTimeout(() => {\r\n                                  setNotificationMessage(null)\r\n                              }, 5000)\r\n                            })\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if(!alreadyExistsInState(persons)){ //It is not in database and not in state\r\n                    const newPersonObject = {\r\n                        name: newName,\r\n                        phone: newPhone\r\n                    }\r\n                    personsService.createPerson(newPersonObject)\r\n                        .then(newPerson => {\r\n                            console.log('promise fullfilled')\r\n                            setPersons(persons.concat(newPerson))\r\n                            setNewName('')\r\n                            setNewPhone('')\r\n                            setNotificationMessage('Added new person', false)\r\n                            setTimeout(() => {\r\n                                setNotificationMessage(null)\r\n                            }, 5000)\r\n                        })\r\n                        .catch(error => {\r\n                          alert(\r\n                            `fail`\r\n                          )\r\n                          setNotificationMessage('error', true)\r\n                          setTimeout(() => {\r\n                            setNotificationMessage(null)\r\n                          }, 5000)\r\n                        })\r\n                }\r\n                else {  //It is not in database but it is in state\r\n                    console.log(\"n�o est� na base mas est� nos estados\")\r\n                }\r\n            }\r\n        })\r\n  }\r\n\r\n  const deletePerson = (id, name) => {\r\n    return (() => {\r\n        if(window.confirm(`delete ${name}?`)) {\r\n        personsService.deletePerson(id)\r\n            .then(response => {\r\n                console.log(response)\r\n                setPersons(persons.filter(person => person.id !== id))\r\n                setNotificationMessage('Deleted Person', false)\r\n                setTimeout(() => {\r\n                    setNotificationMessage(null)\r\n                }, 5000)\r\n            })\r\n            .catch(error => {\r\n                alert(\r\n                    `fail`\r\n                )\r\n                setNotificationMessage('error', true)\r\n                setTimeout(() => {\r\n                    setNotificationMessage(null)\r\n                }, 5000)\r\n            })\r\n        }\r\n        else\r\n            return\r\n    }\r\n    )\r\n  }\r\n\r\n  const alreadyExistsInState = (persons) => {\r\n    const names = persons.map(person => person.name)\r\n    if(names.includes(newName)){\r\n        return true\r\n    }\r\n    else\r\n        return false\r\n  }\r\n\r\n\r\n\r\n  const CheckIfNewNameIsInDatabase = () => {\r\n    personsService.getAll()\r\n        .then(persons => {\r\n            console.log(persons)\r\n            const dbNames = persons.map(p => p.name)\r\n            console.log(dbNames)\r\n            console.log(newName)\r\n            console.log(dbNames.includes(newName))\r\n            if(dbNames.includes(newName)){\r\n                console.log(\"tornou true\")\r\n                isInDatabase = true\r\n                console.log(isInDatabase)\r\n            }\r\n            else\r\n                isInDatabase = false\r\n        })\r\n  }\r\n\r\nconst handleNameChange = (event) => {\r\n    setNewName(event.target.value)\r\n}\r\n\r\nconst handlePhoneChange = (event) => {\r\n    setNewPhone(event.target.value)\r\n}\r\n\r\nconst handleFilterChange = (event) => {\r\n    setFilter(event.target.value)\r\n}\r\n\r\nconst personsToShow = (filter === '' || null) ? persons : persons.filter(person => {\r\n    //person.name.containt(filter) || person.phone.contains(filter)\r\n    return person.name.toLowerCase().includes(filter.toLowerCase()) || person.phone.toLowerCase().includes(filter.toLowerCase())\r\n    \r\n})\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification message={notificationMessage} />\r\n      <Filter filter={filter} handleFilterChange={handleFilterChange} />\r\n      <h3>Add a new</h3>\r\n      <Form addPerson = {addPerson} handleNameChange={handleNameChange} handlePhoneChange={handlePhoneChange} newName={newName} newPhone={newPhone} />\r\n      <h2>Numbers</h2>\r\n      <Persons persons={personsToShow} deleteCallbackFunction = {deletePerson} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)"],"sourceRoot":""}